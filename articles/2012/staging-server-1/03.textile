

h2. Synchronization

After installing and configuring all of the servers and testing out a few items in /var/www, it's time to set up a synchronization script to automatically check out sites if they aren't already, or update sites that already exist.

The script will run in the post-commit hook of all of our subversion repositories, so I found it more convenient to have the subversion server SSH over to the staging server and run the sync script. This way, I can manually sync sites whenever I feel like it to debug or improve performance.

Enough about the explanation, though. Time for some bash-fu:

bc.. #!/bin/bash

REPOS=$1
BASE_PATH=/var/www
REPOS_PATH=/var/www/$REPOS

if [ -z $REPOS ]; then
	echo Usage: $0 REPOSITORY
	exit 1
fi

# Create the base path for the repository if it doesn't exist yet
if [ ! -d $REPOS_PATH ]; then
	mkdir $REPOS_PATH $REPOS_PATH/uploads_
fi

# Establish logging
LOG_FILE=$REPOS_PATH/logs_/`date +%Y/%m/%d.log`
mkdir -p `dirname $LOG_FILE`

# Timestamp log file
date '+--SYNC START %F %T %Z' >> $LOG_FILE

# Checkout/Update trunk
if [ -d $REPOS_PATH/trunk ]; then
	echo '--UPDATE TRUNK' >> $LOG_FILE
	svn up $REPOS_PATH/trunk 2>&1 >> $LOG_FILE
else
	echo '--CHECKOUT TRUNK' >> $LOG_FILE
	svn co svn://okcodev/$REPOS/trunk $REPOS_PATH/trunk 2>&1 >> $LOG_FILE
	ln -sf $REPOS_PATH/uploads_ $REPOS_PATH/trunk/uploads
	mkdir -p $REPOS_PATH/trunk/cache
fi

# Branch management
REPOS_BRANCHES=`tempfile`
STAGE_BRANCHES=`tempfile`

svn ls svn://okcodev/$REPOS/branches | sed 's#/$##' > $REPOS_BRANCHES
ls -d $REPOS_PATH/* | xargs -n1 basename | egrep -v '^logs_|uploads_|trunk$' > $STAGE_BRANCHES

# Remove branches which exist on the server, but not in the repository
REMOVED_BRANCHES=`comm -13 $REPOS_BRANCHES $STAGE_BRANCHES`
if [ -n "$REMOVED_BRANCHES" ]; then
	echo '--REMOVE BRANCHES: '$REMOVED_BRANCHES >> $LOG_FILE
	for REMOVE in $REMOVED_BRANCHES; do
		rm -rf $REPOS_PATH/$REMOVE
	done
fi

# Add/update branches from repository
for BRANCH in `cat $REPOS_BRANCHES`; do
	if [ -d $REPOS_PATH/$BRANCH ]; then
		echo '--UPDATE BRANCH' $BRANCH >> $LOG_FILE
		svn up $REPOS_PATH/$BRANCH 2>&1 >> $LOG_FILE
	else
		echo '--CHECKOUT BRANCH' $BRANCH >> $LOG_FILE
		svn co svn://okcodev/$REPOS/branches/$BRANCH $REPOS_PATH/$BRANCH 2>&1 >> $LOG_FILE
		ln -sf $REPOS_PATH/uploads_ $REPOS_PATH/$BRANCH/uploads
		mkdir -p $REPOS_PATH/$BRANCH/cache
	fi
done

# Check if there is an additional setup script to run
for D in $REPOS_PATH/*; do
	F=$D/setup.sh
	if [ -e $F ]; then
		echo '--SETUP' $F >> $LOG_FILE
		CWD=`pwd`
		cd $D
		source $F
		cd $CWD
	fi
done

# Timestamp log file for ending
date '+--SYNC END %F %T %Z' >> $LOG_FILE

p. I capitalized on the fact that I could link up any folder, so logs of updates are placed in such a way that I can hit any of our sites which are set up and go to http://logs_.mysite.com and view the update logs.

The post commit hook just needed a few extra lines of code to it as well:

bc.. #!/bin/sh
REPOS="$1"
REV="$2"
REPOS_NAME=`/usr/bin/basename $REPOS`
AUTHOR=`/usr/bin/svnlook author -r $REV $REPOS`
CHANGES=`/usr/bin/svnlook changed -r $REV $REPOS | sed 's/ /~/g'`
MESSAGE=`/usr/bin/svnlook log $REPOS -r $REV | sed 's/"/\\"/g'`

if [ $REPOS_NAME != 'database-backups' ]; then
	ssh staging "./sync $REPOS_NAME"
fi
