h1. PHP's Array Handling Red-Headed Stepchildren

PHP handles two data types particularly well: strings and arrays. String handling shelved for another day, let's have a gather at some of the array handling functions that have been around forever, but are rarely used. With the advent of PHP 5.3's -lambda- anonymous functions, these array functions are much easier to whip out and use more frequently.

The documentation on PHP's website for most of the array functions doesn't really flex their power or give examples of what's really possible. I've plucked out a few examples to shed some light on efficient uses of these guys.

h2. @array_walk@

@array_walk@ is typically used to take an existing array and tweak the values a bit. It's particularly handy if you need to surround each element with something prior to an implosion.

It's worth noting that the callback can take the value parameter by reference, and this is very handy.

A typical situation of certain MySQL functions appears when a @NULL@ value is passed in, the return is always @NULL@. In order to circumvent this issue, it's best to surround each argument with a @NULLIF()@ call and cast the value to something comparable.

bc. $columns = array(
	'col1',
	'col2',
	'col3'
);
$greatest_col = 'GREATEST(' . implode(',', array_walk($columns, function(&v) {
	$v = 'NULLIF(' . $v . ')';
})) . ')';

h2. @array_map@



h2. @array_filter@



h2. @array_reduce@
